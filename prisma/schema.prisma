// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// AUTENTICACIÓN
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  downloads     Download[]
  favorites     Favorite[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// ============================================
// CATÁLOGO DE CONTRATOS
// ============================================

model Category {
  id          String   @id @default(cuid())
  name        String   // "Restaurant-Bar", "Salud", etc.
  slug        String   @unique // "restaurant-bar", "salud"
  description String?
  icon        String?  // Nombre del icono de lucide-react
  isActive    Boolean  @default(true)
  order       Int      @default(0) // Para ordenar en el frontend
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contracts   Contract[]

  @@index([slug])
  @@index([isActive])
}

model Contract {
  id          String   @id @default(cuid())
  
  // Info básica
  title       String
  slug        String   @unique
  description String   @db.Text
  
  // Categorización
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  // Pricing
  price       Float    @default(0)
  currency    String   @default("MXN")
  
  // Plan al que pertenece (nullable para individuales)
  planLevel   PlanLevel? // BASIC, INTERMEDIATE, ALPHA
  
  // Archivos
  pdfUrl      String?
  docxUrl     String?
  previewUrl  String?  // URL de preview (primeras páginas)
  
  // Metadata
  pageCount   Int?     // Número de páginas
  language    String   @default("es") // "es" o "en"
  version     String   @default("1.0")
  
  // Estado
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false) // Destacado en homepage
  isNew       Boolean  @default(false) // Badge "Nuevo"
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Stats
  viewCount     Int @default(0)
  downloadCount Int @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relaciones
  transactions Transaction[]
  downloads    Download[]
  favorites    Favorite[]
  addons       ContractAddon[] // Servicios adicionales

  @@index([slug])
  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([planLevel])
  @@index([createdAt])
}

enum PlanLevel {
  BASIC        // 1-5 contratos
  INTERMEDIATE // 6-20 contratos (Abogado Total)
  ALPHA        // 20+ contratos (Alpha Total)
}

// ============================================
// SERVICIOS ADICIONALES
// ============================================

model AddonService {
  id          String   @id @default(cuid())
  
  name        String   // "Traducción", "Firma Electrónica", etc.
  slug        String   @unique
  description String   @db.Text
  price       Float
  currency    String   @default("MXN")
  
  icon        String?  // Icono
  isActive    Boolean  @default(true)
  
  // Configuración
  requiresInput Boolean @default(false) // Si necesita info adicional
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contractAddons ContractAddon[]

  @@index([slug])
  @@index([isActive])
}

// Relación muchos-a-muchos entre Contract y AddonService
model ContractAddon {
  id        String   @id @default(cuid())
  
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  
  addonId    String
  addon      AddonService @relation(fields: [addonId], references: [id])
  
  // Si este addon fue comprado
  transactionId String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  
  createdAt  DateTime @default(now())

  @@unique([contractId, addonId])
  @@index([contractId])
  @@index([addonId])
  @@index([transactionId])
}

// ============================================
// TRANSACCIONES Y DESCARGAS
// ============================================

model Transaction {
  id              String   @id @default(cuid())
  
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  contractId      String
  contract        Contract @relation(fields: [contractId], references: [id])
  
  // Pago
  amount          Float
  currency        String   @default("MXN")
  status          TransactionStatus @default(PENDING)
  
  // Stripe
  stripePaymentId String?  @unique
  stripeSessionId String?  @unique
  paymentMethod   String?  // "card", "oxxo", "spei"
  
  // Metadata
  metadata        Json?    // Info adicional
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  downloads       Download[]
  addons          ContractAddon[]

  @@index([userId])
  @@index([contractId])
  @@index([status])
  @@index([createdAt])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Download {
  id            String   @id @default(cuid())
  
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  contractId    String
  contract      Contract @relation(fields: [contractId], references: [id])
  
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  
  // Tracking
  ipAddress     String?
  userAgent     String?
  
  downloadedAt  DateTime @default(now())

  @@index([userId])
  @@index([contractId])
  @@index([transactionId])
}

// ============================================
// FAVORITOS
// ============================================

model Favorite {
  id         String   @id @default(cuid())
  
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())

  @@unique([userId, contractId])
  @@index([userId])
  @@index([contractId])
}